---
# Module title
title: Preprocessing

# Module-specific parameters (that are not already in the profile yaml)
params:
  # Name of the module. Must be the same as name of qmd file.
  module: "2_preprocessing"
  
  # Default assay. All cells must have this assay.
  default_assay: "RNA"
  
# Module execution
execute:
  # Should this module be re-rendered?
  # - auto: only when code changes
  # - true/false: always/never
  # Does not apply in interactive mode or when explicitly rendering this document via in rstudio
  freeze: auto
---

```{r}
#| label: setup
#| message: false
#| warning: false

# If running code interactively in rstudio, set profile here
# When rendering with quarto, profile is already set and should not be overwritten
if (nchar(Sys.getenv("QUARTO_PROFILE")) == 0) {Sys.setenv("QUARTO_PROFILE" = "default")}

# Source general configurations (always)
source("R/general_configuration.R")

# Source required R functions
source("R/functions_util.R")
source("R/functions_io.R")

# Load libraries
library(knitr)
library(magrittr)
library(gt)
library(Seurat)

# Get module name and directory (needed to access files within the module directory)
module_name = param("module")
module_dir = file.path("modules", module_name)
```

```{r}
#| label: preprocessing_preparation

# Module directory 'results' contains all output that should be provided together with the final report of the project
dir.create(file.path(module_dir, "results"), showWarnings=FALSE)

# Module directory 'tmp' contains all intermediate files only used for this module
dir.create(file.path(module_dir, "tmp"), showWarnings=FALSE)

# Only if counts are stored on disk: module directory 'counts' contains counts for all datasets and assays
dir.create(file.path(module_dir, "counts"), showWarnings=FALSE)

# Read seurat object from previous chapter
sc = readRDS(file.path("modules", "1_read_data", "sc.rds"))
```

## Overview

This chapter will contain the preprocessing steps.

## Quality control 

```{r}
#| label: preprocessing_calculate_qc
#| timeit: true

############
# Barcodes #
############

# Calculate percentage of counts in mitochondrial genes
mt_features = grep(pattern="^MT-", x=rownames(sc), value=TRUE, ignore.case=TRUE)
sc[["percent_mt"]] = PercentageFeatureSet(object=sc, features=mt_features)

# Calculate percentage of counts in ribosomal genes
ribo_features = grep(pattern="^RP[SL]", x=rownames(sc), value=TRUE, ignore.case=TRUE)
sc[["percent_ribo"]] = PercentageFeatureSet(object=sc, features=ribo_features)

# Calculate percentage of counts in globin genes
globin_features = grep("^HB[ABDGEMQZ]", x=rownames(sc), value=TRUE, ignore.case=TRUE)
sc[["percent_globin"]] = PercentageFeatureSet(object=sc, features=globin_features)

############
# Features #
############

default_assay = param("default_assay")
sc[[default_assay]]

```

```{r preprocessing_calculate_qc_features}
# Only RNA assay at the moment
# counts_median uses sapply on the counts matrix, which converts the sparse matrix into a normal matrix
#   This might have to be adapted in future (Sparse Matrix Apply Function)

for(l in Layers(sc[[default_assay]])) {
  l = "counts.pbmc_5k"
  
  # Get data for layer (sample)
  counts = sc[[default_assay]][[l]]
  bcs = counts %>% colnames()
  totals_counts = sc[[]][bcs, paste0("nCount_", default_assay), drop=TRUE]
  counts_perc = Matrix::t(Matrix::t(counts_rna)/total_counts)*100

  # Calculate feature filters
  num_cells_expr = Matrix::rowSums(counts >= 1)
  num_cells_expr_threshold = Matrix::rowSums(counts >= 1)
  
  # Calculate median of counts_rna_perc per gene 
  counts_median = Matrix::rowMedians(counts_perc)
  
  sc[[default_assay]]["num_bcs_expr.layer1"] = 
  num_bcs_expr_threshold.layer1
  median.layer1
  
  sc[[d]]

  sc[[n]][[param$assay_raw]] = Seurat::AddMetaData(sc[[n]][[param$assay_raw]], data.frame(num_cells_expr, num_cells_expr_threshold, counts_median))

})
```

